import pandas as pd
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

configfile: "config/config.yaml"


datasets = pd.read_csv("config/datasets.csv", sep=",", index_col=0)
results = config["results_directory"]
LOGDIR = config["log_directory"]
DRUGBANKDIR = config["parameters"]["drugbank"]["directory"]


def get_resource(rule, resource):
    try:
        return config["resources"][rule][resource]
    except KeyError:
        return config["resources"]["default"][resource]


def get_prism_genesets_classic(wildcards):
    checkpoint_output = checkpoints.prism_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/prism/genesets/classic/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_prism_genesets_fold(wildcards):
    checkpoint_output = checkpoints.prism_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/prism/genesets/fold/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_ctrp_genesets_classic(wildcards):
    checkpoint_output = checkpoints.ctrp_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/ctrp/genesets/classic/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_ctrp_genesets_fold(wildcards):
    checkpoint_output = checkpoints.ctrp_annotate_models.get(**wildcards).output[
        "auc_models_candidates"
    ]

    return expand(
        f"{results}/ctrp/genesets/fold/{{broad_id}}",
        broad_id=glob_wildcards(os.path.join(checkpoint_output, "{brd_id}.csv")).brd_id,
    )


def get_gdsc_genesets_classic(wildcards):
    checkpoint_output = checkpoints.gdsc_generate_compound_curves.get(
        **wildcards
    ).output["auc_models_candidates"]

    return expand(
        f"{results}/gdsc/genesets/classic/{{drug_id}}",
        drug_id=glob_wildcards(
            os.path.join(checkpoint_output, "{drug_id}.csv")
        ).drug_id,
    )


def get_gdsc_genesets_fold(wildcards):
    checkpoint_output = checkpoints.gdsc_generate_compound_curves.get(
        **wildcards
    ).output["auc_models_candidates"]

    return expand(
        f"{results}/gdsc/genesets/fold/{{drug_id}}",
        drug_id=glob_wildcards(
            os.path.join(checkpoint_output, "{drug_id}.csv")
        ).drug_id,
    )


def get_depmap_genesets(wildcards):
    checkpoint_output = checkpoints.dependencies_annotate_crispr_data.get(
        **wildcards
    ).output["model_candidates"]

    return expand(
        f"{results}/dependencies/genesets/{{gene}}",
        gene=glob_wildcards(os.path.join(checkpoint_output, "{gene}.csv")).gene,
    )

def get_mets_genesets_growth(wildcards):
    checkpoint_output = checkpoints.mets_generate_models.get(
        **wildcards
    ).output["met_model_candidates"]

    return expand(
        f"{results}/mets/genesets/{{met_type}}_growth",
        met_type=glob_wildcards(os.path.join(checkpoint_output, "{met_type}.csv")).met_type,
    )

def get_mets_genesets_penetrance(wildcards):
    checkpoint_output = checkpoints.mets_generate_models.get(
        **wildcards
    ).output["met_model_candidates"]

    return expand(
        f"{results}/mets/genesets/{{met_type}}_penetrance",
        met_type=glob_wildcards(os.path.join(checkpoint_output, "{met_type}.csv")).met_type,
    )


rule all:
    input:
        f"{results}/drug_signatures_classic.gmt",
        f"{results}/drugbank_synonyms.tsv"


## Load rules ##
include: "rules/common.smk"
include: "rules/gdsc_arrays_signatures.smk"
include: "rules/prism_signatures.smk"
include: "rules/ctrp_signatures.smk"
include: "rules/dependency_signatures.smk"
include: "rules/metastasis_signatures.smk"
include: "rules/database.smk"
include: "rules/generate_gmt_collections.smk"
include: "rules/beyondcell_signatures.smk"